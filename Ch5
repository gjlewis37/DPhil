###########################
Matlab code for population protection
###########################
%% Population protection plots

D = 0 : 0.0001 : 1

D1 = 0: 0.0001 : 0.5
D2 = 0.5001 : 0.0001 : 1

PBDF = D*0.9
PFDF1 = 2*D1*0.7
PFDF2 = 0.7 + 2*(D2-0.5)*0.2

subplot(1,3,1)
plot(PBDF)
hold on
plot([PFDF1 PFDF2])
hold off
xlim([0 10000])
legend("BDF", "FDF")
legend('location','northwest')
xlabel("D")
ylabel("P")
xticks([0 2500 5000 7500 10000])
xticklabels(["0", "0.25", "0.5", "0.75", "1"])
title('VE_1 = 0.7, VE_2 = 0.9 (A_r = 0.29)')

D = 0 : 0.0001 : 1

D1 = 0: 0.0001 : 0.5
D2 = 0.5001 : 0.0001 : 1

PBDF = D*0.9
PFDF1 = 2*D1*0.5
PFDF2 = 0.5 + 2*(D2-0.5)*0.4

subplot(1,3,2)
plot(PBDF)
hold on
plot([PFDF1 PFDF2])
hold off
xlim([0 10000])
legend("BDF", "FDF")
legend('location','northwest')
xlabel("D")
ylabel("P")
xticks([0 2500 5000 7500 10000])
xticklabels(["0", "0.25", "0.5", "0.75", "1"])
title('VE_1 = 0.5, VE_2 = 0.9 (A_r = 0.8)')

D = 0 : 0.0001 : 1

D1 = 0: 0.0001 : 0.5
D2 = 0.5001 : 0.0001 : 1

PBDF = D*0.9
PFDF1 = 2*D1*0.2
PFDF2 = 0.2 + 2*(D2-0.5)*0.7

subplot(1,3,3)
plot(PBDF)
hold on
plot([PFDF1 PFDF2])
hold off
xlim([0 10000])
legend("BDF", "FDF")
legend('location','northwest')
xlabel("D")
ylabel("P")
xticks([0 2500 5000 7500 10000])
xticklabels(["0", "0.25", "0.5", "0.75", "1"])
title('VE_1 = 0.2, VE_2 = 0.9 (A_r = 3.5)')



%% Stairstepping/batching

D = 0 : 0.0001 : 1

D1 = 0: 0.0001 : 0.5
D2 = 0.5001 : 0.0001 : 1

d1 = 0:0.0001:0.1
d2 = 0.1001:0.0001:0.2
d3 = 0.2001:0.0001:0.3
d4 = 0.3001:0.0001:0.4
d5 = 0.4001:0.0001:0.5
d6 = 0.5001:0.0001:0.6
d7 = 0.6001:0.0001:0.7
d8 = 0.7001:0.0001:0.8
d9 = 0.8001:0.0001:0.9
d10 = 0.9001:0.0001:1

PFDF1 = 2*D1*0.7
PFDF2 = 0.7 + 2*(D2-0.5)*0.2

PBDF1 = 2*d1*0.7
PBDF2 = 0.14 + 2*(d2-0.1)*0.2
PBDF3 = 0.18 + 2*(d3-0.2)*0.7
PBDF4 = 0.32 + 2*(d4-0.3)*0.2
PBDF5 = 0.36 + 2*(d5-0.4)*0.7
PBDF6 = 0.50 + 2*(d6-0.5)*0.2
PBDF7 = 0.54 + 2*(d7-0.6)*0.7
PBDF8 = 0.68 + 2*(d8-0.7)*0.2
PBDF9 = 0.72 + 2*(d9-0.8)*0.7
PBDF10 = 0.86 + 2*(d10-0.9)*0.2

plot([PBDF1 PBDF2 PBDF3 PBDF4 PBDF5 PBDF6 PBDF7 PBDF8 PBDF9 PBDF10])
hold on
plot([PFDF1 PFDF2])
hold off
xlim([0 10000])
legend("BDF", "FDF")
legend('location','northwest')
xlabel("D")
ylabel("P")
xticks([0 2500 5000 7500 10000])
xticklabels(["0", "0.25", "0.5", "0.75", "1"])
title('FDF versus BDF with delay between doses')

%% Fig on general pop protection

Cpop = [1
0.9410853376
0.8787915205
0.8207067451
0.7654765257
0.7024895406
0.6343456779
0.5671624153
0.5013507527
0.4412414889
0.3733952831
0.3030378465
0.2384064857
0.18311818
0.1319944217
0.08305080638
0.04940058448
0.02421131457
0.008790835629
0]

Crisk = [1
1
0.9992646195
0.9985789268
0.9972749377
0.9957878108
0.9925700487
0.987811445
0.9808192656
0.9701753882
0.9517540745
0.9218534882
0.8783638944
0.8202753513
0.7363863994
0.6110079266
0.4763428984
0.3187420159
0.1680135097
0
    ]

plot(Cpop, Crisk)
xlabel('Proportion of population')
ylabel('Proportion of risk')
title('Cumulative risk versus population proportion, ordered by descending age')
%%
%%AUC age graphs

FDFD20 = [0
    0.005742067414
0.01581453759
0.03226786375
0.05424778134
0.08621715835
0.1196105784
0.1557242304
0.1979406528
0.2438972787
0.288213599
0.3274762425
0.3704636238
0.4143469176
0.4588576638
0.5
0.5057420674
0.5158145376
0.5322678638
0.5542477813
0.5862171583
0.6196105784
0.6557242304
0.6979406528
0.7438972787
0.788213599
0.8274762425
0.8704636238
0.9143469176
0.9588576638
1
    ]

FDFP20 = [0
    0.1310342507
0.2485878743
0.3715012852
0.476526953
0.5743100079
0.6397352584
0.685038691
0.7189563583
0.7422759172
0.7566427561
0.7649439487
0.7703971709
0.7741084205
0.776617963
0.7777777778
0.8152161351
0.8488028847
0.8839210021
0.9139283358
0.9418663515
0.9605592802
0.9735031181
0.9831938802
0.9898566113
0.9939614224
0.9963331917
0.9978912552
0.9989516122
0.9996686243
1
]

BDFD20 = [
    0
    0.005742067414
0.01148413483
0.021556605
0.03162907517
0.04808240134
0.0645357275
0.08651564509
0.1084955627
0.1404649397
0.1724343167
0.2058277367
0.2392211567
0.2753348087
0.3114484608
0.3536648832
0.3958813056
0.4418379315
0.4877945574
0.5321108778
0.5764271981
0.6156898415
0.654952485
0.6979398663
0.7409272476
0.7848105414
0.8286938352
0.8732045814
0.9177153276
0.9588576638
1]

BDFP20 = [
    0
    0.1310342507
0.1684726081
0.2860262316
0.3196129812
0.4425263921
0.4776445095
0.5826701774
0.612677511
0.7104605659
0.7383985815
0.8038238321
0.8225167608
0.8678201934
0.8807640313
0.9146816986
0.9243724607
0.9476920196
0.9543547507
0.9687215896
0.9728264007
0.9811275933
0.9834993626
0.9889525848
0.9905106483
0.9942218979
0.9952822549
0.9977917974
0.9985088096
0.9996686243
1]

OD20 = [0
    0.005742067414
0.01581453759
0.03226786375
0.03800993117
0.05998984876
0.07006231893
0.1020316959
0.1184850221
0.1518784421
0.1738583597
0.2099720117
0.2419413887
0.2841578112
0.3175512312
0.3635078571
0.3996215091
0.4439378294
0.4861542519
0.5254168953
0.5713735212
0.6143609025
0.6586772228
0.7025605166
0.7418231601
0.7863339063
0.8293212876
0.8704636238
0.9143469176
0.9588576638
1
    ]

OP20 = [0
    0.1310342507
0.2485878743
0.3715012852
0.4089396425
0.5139653104
0.54755206
0.6453351148
0.6804532322
0.7458784827
0.7758858164
0.821189249
0.8491272647
0.883044932
0.9017378607
0.9250574196
0.9380012575
0.9523680964
0.9620588585
0.9703600511
0.9770227822
0.9824760044
0.9865808155
0.9902920651
0.9926638344
0.9951733769
0.9967314404
0.9978912552
0.9989516122
0.9996686243
1
    ]

FDFD50 =[
    0
    0.01177148725
0.03242048798
0.06615052026
0.1112103047
0.1767489141
0.2452068736
0.3192414265
0.4057869236
0.5
0.5117714873
0.532420488
0.5661505203
0.6112103047
0.6767489141
0.7452068736
0.8192414265
0.9057869236
1
    ]

FDFP50 = [
    0
    0.1373014077
0.2604774316
0.3892695928
0.499318469
0.6017783298
0.6703327646
0.7178029873
0.753342882
0.7777777778
0.8170067514
0.8521999011
0.8889976614
0.9204401975
0.9497144434
0.9693014248
0.9828643456
0.9930186012
1]

BDFD50 = [
    0
    0.01177148725
0.0235429745
0.04419197523
0.06484097596
0.09857100824
0.1323010405
0.1773608249
0.2224206093
0.2879592188
0.3534978283
0.4219557877
0.4904137471
0.5644483001
0.6384828531
0.7250283502
0.8115738473
0.9057869236
1
    ]

BDFP50 = [0
    0.1373014077
0.1765303813
0.2997064052
0.3348995549
0.4636917161
0.5004894764
0.6105383527
0.6419808888
0.7444407495
0.7737149954
0.8422694302
0.8618564116
0.9093266343
0.9228895551
0.9584294498
0.9685837055
0.9930186012
1]

OD50 =[0
    0.01177148725
0.03242048798
0.06615052026
0.07792200751
0.1229817919
0.1436307926
0.2091694021
0.2428994344
0.3113573938
0.3564171782
0.4304517312
0.4959903407
0.5825358378
0.6509937972
0.7452068736
0.8192414265
0.9057869236
1
    ]

OP50 = [
    0
    0.1373014077
0.2604774316
0.3892695928
0.4284985664
0.5385474427
0.5737405923
0.6762004531
0.7129982134
0.7815526482
0.8129951843
0.860465407
0.889739653
0.9252795477
0.944866529
0.9693014248
0.9828643456
0.9930186012
1]

%Drawing graphs
plot(FDFD20, FDFP20, BDFD20, BDFP20, OD20, OP20)
legend("Naive first doses first (AUC = 0.82)", "Both doses first (AUC = 0.87)", "Optimal (AUC = 0.88)")
legend('Location', 'southeast')
xlabel('D')
ylabel('B')
title('Benefit curve for vaccination of all 20+ in the UK')



a = trapz(FDFD20,FDFP20)
b = trapz(BDFD20,BDFP20)
c = trapz(OD20,OP20)

plot(FDFD50, FDFP50, BDFD50, BDFP50, OD50, OP50)
legend("First doses first", "Both doses first", "Optimal")


a = trapz(FDFD50,FDFP50)
b = trapz(BDFD50,BDFP50)
c = trapz(OD50,OP50)

%% simple accel model

sFDFD20 = sqrt(FDFD20)
sBDFD20 = sqrt(BDFD20)
sOD20 = sqrt(OD20)

plot(sFDFD20, FDFP20, sBDFD20, BDFP20, sOD20, OP20)
legend("Naive first doses first (AUC = 0.82)", "Both doses first (AUC = 0.87)", "Optimal (AUC = 0.88)")
legend('Location', 'southeast')
xlabel('D')
ylabel('B')
title('Benefit curve for vaccination of all 20+ in the UK')

a = trapz(sFDFD20,FDFP20)
b = trapz(sBDFD20,BDFP20)
c = trapz(sOD20,OP20)

%%
%%
%%Fig 5.1

x1 = 0 :0.01: 100;
pd1 = makedist('Normal', 40, 20)
y1 = pdf(pd1, x1);

x2 = 0 :0.01: 100;
pd2 = makedist('Normal', 30, 20)
y2 = pdf(pd2, x2);

x3 = 0 :0.01: 100;
pd3 = makedist('Normal', 20, 20)
y3 = pdf(pd3, x3);

%getting values


subplot(3,1,1)
plot(x1,y1)
hold on
a1 = area(80:0.01:100,pdf(pd1,80:0.01:100), 'FaceColor', 'r', 'FaceAlpha', 0.3)
a2 = area(60:0.01:80,pdf(pd1,60:0.01:80), 'FaceColor', 'b', 'FaceAlpha', 0.3)
a3 = area(20:0.01:60,pdf(pd1,20:0.01:60), 'FaceColor', 'g', 'FaceAlpha', 0.3)
hold off
legend([a3 a2 a1], {'Infectious', 'Infectious & Symptomatic', 'Infectious & Symptomatic & Fatal'})
set(gca,'xtick',[])
set(gca,'xticklabel',[])
set(gca,'ytick',[])
set(gca,'yticklabel',[])
set(gca, 'box', 'off')
title('Unvaccinated exposure')

subplot(3,1,2)
plot(x2,y2)
hold on
area(80:0.01:100,pdf(pd2,80:0.01:100), 'FaceColor', 'r', 'FaceAlpha', 0.3)
area(60:0.01:80,pdf(pd2,60:0.01:80), 'FaceColor', 'b', 'FaceAlpha', 0.3)
area(20:0.01:60,pdf(pd2,20:0.01:60), 'FaceColor', 'g', 'FaceAlpha', 0.3)
hold off
set(gca,'xtick',[])
set(gca,'xticklabel',[])
set(gca,'ytick',[])
set(gca,'yticklabel',[])
set(gca, 'box', 'off')
ylabel('Frequency')
title('Exposure with one vaccine dose')

subplot(3,1,3)
plot(x3,y3)
hold on
area(80:0.01:100,pdf(pd3,80:0.01:100), 'FaceColor', 'r', 'FaceAlpha', 0.3)
area(60:0.01:80,pdf(pd3,60:0.01:80), 'FaceColor', 'b', 'FaceAlpha', 0.3)
area(20:0.01:60,pdf(pd3,20:0.01:60), 'FaceColor', 'g', 'FaceAlpha', 0.3)
hold off
set(gca,'xtick',[])
set(gca,'xticklabel',[])
set(gca,'ytick',[])
set(gca,'yticklabel',[])
set(gca, 'box', 'off')
xlabel('Disease Severity')
title('Exposure with both vaccine doses')


##################################
V2SIRD modelling
##################################

#BASELINE MODEL

## Baseline model (i.e. no vaccination)

Mif = matrix(nrow = 1100, ncol = 30) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

#Other variables
R = 1.1
V = 0 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0.5 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  StV1 = V ## As boosters first, intermediate check of number vaccinated
  
  if ((Mif[i+100, "S"] - StV1) < V) ## Checking whether less susceptibles than vaccination rate
  {StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  if (Mif[i+100, "S"] - StV1 < 0.00000001) ## Lazy catch to ensure S remains non-negative
  {StV1 = 0}
  
  Mif[i+100, "StV1n"] = StV1 * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
  
  Mif[i+100, "StV1e"] = StV1 * VE1 ##Those which are not are effective
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ###Intermediate variable - V1tV2
  V1tV2 = V - StV1 ##On boosters first, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0) ## Checking whether less susceptibles than vaccination rate
  {V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  {V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"]
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))



Mif = matrix(nrow = 1100, ncol = 30) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

#Other variables
R = 1.5
V = 0 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0.5 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  StV1 = V ## As boosters first, intermediate check of number vaccinated
  
  if ((Mif[i+100, "S"] - StV1) < V) ## Checking whether less susceptibles than vaccination rate
  {StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  if (Mif[i+100, "S"] - StV1 < 0.00000001) ## Lazy catch to ensure S remains non-negative
  {StV1 = 0}
  
  Mif[i+100, "StV1n"] = StV1 * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
  
  Mif[i+100, "StV1e"] = StV1 * VE1 ##Those which are not are effective
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ###Intermediate variable - V1tV2
  V1tV2 = V - StV1 ##On boosters first, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0) ## Checking whether less susceptibles than vaccination rate
  {V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  {V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"]
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data2 = t(data[,100:600])
plot(data2[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.5)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data2[,2], col = 'red')
lines(data2[,3], col = 'green')
lines(data2[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))



Mif = matrix(nrow = 1100, ncol = 30) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

#Other variables
R = 3.0
V = 0 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0.5 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  StV1 = V ## As boosters first, intermediate check of number vaccinated
  
  if ((Mif[i+100, "S"] - StV1) < V) ## Checking whether less susceptibles than vaccination rate
  {StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  if (Mif[i+100, "S"] - StV1 < 0.00000001) ## Lazy catch to ensure S remains non-negative
  {StV1 = 0}
  
  Mif[i+100, "StV1n"] = StV1 * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
  
  Mif[i+100, "StV1e"] = StV1 * VE1 ##Those which are not are effective
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ###Intermediate variable - V1tV2
  V1tV2 = V - StV1 ##On boosters first, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0) ## Checking whether less susceptibles than vaccination rate
  {V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  {V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"]
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data3 = t(data[,100:600])
plot(data3[2:500,1], type = 'l', main = "Epidemic Curve (R = 3.0)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data3[,2], col = 'red')
lines(data3[,3], col = 'green')
lines(data3[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))




par(mfrow=c(1,3)) 
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')

plot(data2[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.5)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data2[,2], col = 'red')
lines(data2[,3], col = 'green')
lines(data2[,4], col = 'blue')

plot(data3[2:500,1], type = 'l', main = "Epidemic Curve (R = 3.0)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data3[,2], col = 'red')
lines(data3[,3], col = 'green')
lines(data3[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))


##Pre-existing immunity

Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 1.5
V = 0 # Rate of vaccination
VE1 = 0 ## General sense efficacy (initial dose)
VE2 = 1 ## General sense efficacy (booster dose)
VE1Ip = 0.5 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.7 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (if FDF)
  StV1 = V
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  V1tV2 = V - StV1 ##On FDF, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

PIlownil = PI


## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 1.5
V = 0.5 # Rate of vaccination
VE1 = 0 ## General sense efficacy (initial dose)
VE2 = 1 ## General sense efficacy (booster dose)
VE1Ip = 0 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.3 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (if FDF)
  StV1 = V
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  V1tV2 = V - StV1 ##On FDF, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

PIlowlow = PI

## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 1.5
V = 0.5 # Rate of vaccination
VE1 = 0 ## General sense efficacy (initial dose)
VE2 = 1 ## General sense efficacy (booster dose)
VE1Ip = 0.5 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.7 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (if FDF)
  StV1 = V
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  V1tV2 = V - StV1 ##On FDF, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

PIlowhigh = PI


## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 3.0
V = 0 # Rate of vaccination
VE1 = 0 ## General sense efficacy (initial dose)
VE2 = 1 ## General sense efficacy (booster dose)
VE1Ip = 0.5 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.7 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (if FDF)
  StV1 = V
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  V1tV2 = V - StV1 ##On FDF, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

PIhighnil = PI


## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 3.0
V = 0.5 # Rate of vaccination
VE1 = 0 ## General sense efficacy (initial dose)
VE2 = 1 ## General sense efficacy (booster dose)
VE1Ip = 0 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.3 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (if FDF)
  StV1 = V
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  V1tV2 = V - StV1 ##On FDF, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

PIhighlow = PI

## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 3.0
V = 0.5 # Rate of vaccination
VE1 = 0 ## General sense efficacy (initial dose)
VE2 = 1 ## General sense efficacy (booster dose)
VE1Ip = 0.5 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.7 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (if FDF)
  StV1 = V
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  V1tV2 = V - StV1 ##On FDF, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

PIhighhigh = PI

par(mfrow=c(1,2)) 
plot(PIlownil, type = 'l', main = "Epidemic Curve (R = 1.5)", xlab = "Time step", ylab = "Proportion Infected", ylim = c(0, 0.6), xlim= c(0, 400)) 
lines(PIlowlow, col = 'blue')
lines(PIlowhigh, col = 'green')

plot(PIhighnil, type = 'l', main = "Epidemic Curve (R = 3.0)", xlab = "Time step", ylab = "Proportion Infected", ylim = c(0, 0.6), xlim= c(0, 400)) 
lines(PIhighlow, col = 'blue')
lines(PIhighhigh, col = 'green')

legend("topright", legend = c("No vaccination", "e^t = 0.3", "e^t = 0.7"), lwd = 3, col=c("black", "blue", "green"))

## Main assessment of FDF/BDF

Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 1.1
V = 0.00 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (if FDF)
  StV1 = V
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  V1tV2 = V - StV1 ##On FDF, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*(VE2-VE1)*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

plot(data1[,2])

lowbase = data1[,2]

################################################################1.1, FDF

## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 1.1
V = 0.01 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0.5 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (if FDF)
  StV1 = V
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  V1tV2 = V - StV1 ##On FDF, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*(VE2-VE1)*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

plot(data1[,2])

lowfdf = data1[,2]


################################################################1.1, BDF

## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 1.1
V = 0.01 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0.5 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (BDF)
  
  V1tV2 = V ##On BDF, boosters provided first
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  StV1 = V - V1tV2 ## First doses remainder after second doses allocated
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*(VE2-VE1)*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

plot(data1[,2])

lowbdf = data1[,2]

plot(lowbase, type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion Infected", xlim= c(0, 400)) 
lines(lowfdf, col = 'blue')
lines(lowbdf, col = 'red')







#############################################1.5, baseline

## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 1.5
V = 0.00 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (if FDF)
  StV1 = V
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  V1tV2 = V - StV1 ##On FDF, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*(VE2-VE1)*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

plot(data1[,2])

midbase = data1[,2]

################################################################1.5, FDF

## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 1.5
V = 0.01 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0.5 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (if FDF)
  StV1 = V
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  V1tV2 = V - StV1 ##On FDF, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*(VE2-VE1)*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

plot(data1[,2])

midfdf = data1[,2]


################################################################1.5, BDF

## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 1.5
V = 0.01 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0.5 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (BDF)
  
  V1tV2 = V ##On BDF, boosters provided first
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  StV1 = V - V1tV2 ## First doses remainder after second doses allocated
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*(VE2-VE1)*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

plot(data1[,2])

midbdf = data1[,2]

plot(midbase, type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion Infected", xlim= c(0, 400)) 
lines(midfdf, col = 'blue')
lines(midbdf, col = 'red')





#############################################3.0, baseline

## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 3.0
V = 0.00 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (if FDF)
  StV1 = V
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  V1tV2 = V - StV1 ##On FDF, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*(VE2-VE1)*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

plot(data1[,2])

highbase = data1[,2]

################################################################1.1, FDF

## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 3.0
V = 0.01 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0.5 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (if FDF)
  StV1 = V
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  V1tV2 = V - StV1 ##On FDF, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*(VE2-VE1)*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

plot(data1[,2])

highfdf = data1[,2]


################################################################3, BDF

## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 3.0
V = 0.01 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0.5 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (BDF)
  
  V1tV2 = V ##On BDF, boosters provided first
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  StV1 = V - V1tV2 ## First doses remainder after second doses allocated
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*(VE2-VE1)*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

plot(data1[,2])

highbdf = data1[,2]

plot(highbase, type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion Infected", xlim= c(0, 400)) 
lines(highfdf, col = 'blue')
lines(highbdf, col = 'red')


par(mfrow=c(1,3))
plot(lowbase, type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion Infected", xlim= c(0, 400)) 
lines(lowfdf, col = 'blue')
lines(lowbdf, col = 'red')

plot(midbase, type = 'l', main = "Epidemic Curve (R = 1.5)", xlab = "Time step", ylab = "Proportion Infected", xlim= c(0, 400)) 
lines(midfdf, col = 'blue')
lines(midbdf, col = 'red')

plot(highbase, type = 'l', main = "Epidemic Curve (R = 3)", xlab = "Time step", ylab = "Proportion Infected", xlim= c(0, 400)) 
lines(highfdf, col = 'blue')
lines(highbdf, col = 'red')

legend("topright", legend = c("No vaccination", "FDF", "BDF"), lwd = 3, col=c("black", "blue", "red"))

sum(lowbase)/7

## Re run with differential sterilizing immunity:

Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 1.1
V = 0.00 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (if FDF)
  StV1 = V
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  V1tV2 = V - StV1 ##On FDF, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*(VE2-VE1)*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

plot(data1[,2])

lowbase = data1[,2]

################################################################1.1, FDF

## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 1.1
V = 0.01 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0.2 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (if FDF)
  StV1 = V
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  V1tV2 = V - StV1 ##On FDF, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*(VE2-VE1)*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

plot(data1[,2])

lowfdf = data1[,2]


################################################################1.1, BDF

## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 1.1
V = 0.01 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0.2 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (BDF)
  
  V1tV2 = V ##On BDF, boosters provided first
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  StV1 = V - V1tV2 ## First doses remainder after second doses allocated
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*(VE2-VE1)*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

plot(data1[,2])

lowbdf = data1[,2]

plot(lowbase, type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion Infected", xlim= c(0, 400)) 
lines(lowfdf, col = 'blue')
lines(lowbdf, col = 'red')







#############################################1.5, baseline

## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 1.5
V = 0.00 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (if FDF)
  StV1 = V
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  V1tV2 = V - StV1 ##On FDF, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*(VE2-VE1)*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

plot(data1[,2])

midbase = data1[,2]

################################################################1.5, FDF

## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 1.5
V = 0.01 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0.2 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (if FDF)
  StV1 = V
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  V1tV2 = V - StV1 ##On FDF, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*(VE2-VE1)*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

plot(data1[,2])

midfdf = data1[,2]


################################################################1.5, BDF

## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 1.5
V = 0.01 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0.2 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (BDF)
  
  V1tV2 = V ##On BDF, boosters provided first
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  StV1 = V - V1tV2 ## First doses remainder after second doses allocated
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*(VE2-VE1)*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

plot(data1[,2])

midbdf = data1[,2]

plot(midbase, type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion Infected", xlim= c(0, 400)) 
lines(midfdf, col = 'blue')
lines(midbdf, col = 'red')





#############################################3.0, baseline

## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 3.0
V = 0.00 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (if FDF)
  StV1 = V
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  V1tV2 = V - StV1 ##On FDF, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*(VE2-VE1)*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

plot(data1[,2])

highbase = data1[,2]

################################################################1.1, FDF

## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 3.0
V = 0.01 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0.2 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (if FDF)
  StV1 = V
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  V1tV2 = V - StV1 ##On FDF, only given after no more susceptibles (i.e. no more initial vaccination)
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*(VE2-VE1)*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

plot(data1[,2])

highfdf = data1[,2]


################################################################3, BDF

## Attempting the mega model (initial first)

## TODO: Lagged transition to vaccine efficacy
## 'Resetting recovery period after initial vax (typically v. minor correction)


Mif = matrix(nrow = 1100, ncol = 31) ## Constructing matrix
Mif[1:100,] = 0 ## Preloading zeros (for use later)
colnames(Mif) = c("S", "I", "R", "D", "V1n", "V1e", "V1i", "V1r", "V2n", "V2e", "V2i", "V2r",
                  "StI", "StV1n", "StV1e", "ItR", "ItD", "V1ntI", "V1ntV2n", "V1ntV2e",
                  "V1etV1r", "V1etV1i", "V1etV2e", "V1itV1r", "V1itV2i", "V1rtV2r", "V2ntI",
                  "V2etV2r", "V2etV2i", "V2itV2r", "checktotal")

# States:
# S = Susceptible
# I = Infected
# R = Recovered
# D = Dead
# V1n = Initial vaccination, ineffective (i.e. no protection)
# V1e = Initial vaccination, effective (i.e. protection)
# V1i = Initial vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V1r = Initial vaccination, recovered (e.g. either via vaccination protection from infection)
# V2n = Booster vaccination, ineffective (i.e. no protection)
# V2e = Booster vaccination, effective (i.e. protection)
# V2i = Booster vaccination, infected (e.g. effective vaccination prevents death but still allows transmission)
# V2r = Booster vaccination, recovered (e.g. either via vaccination protection from infection)

#Transitions
# StI = S to I
# StV1n = S to V1n
#etc.

#Initial conditions
Mif[101,] = c(0.999, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)

#Other variables
R = 3.0
V = 0.01 # Rate of vaccination
VE1 = 0.7 ## General sense efficacy (initial dose)
VE2 = 0.9 ## General sense efficacy (booster dose)
VE1Ip = 0.2 ## Coefficient of infection protection - I.e. how effective the vaccine is at preventing someone being infectious
VE2Ip = 0.5 ## As above, but for second vaccination
IFR = 0.005 #0.5% population IFR



for (i in 1:999) {
  #Dose strategy (BDF)
  
  V1tV2 = V ##On BDF, boosters provided first
  
  if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]  - V1tV2 < 0){## Checking whether less susceptibles than vaccination rate
    V1tV2 = Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]} ## If so, setting number vaccinated to the remainder
  
  StV1 = V - V1tV2 ## First doses remainder after second doses allocated
  
  if ((Mif[i+100, "S"] - StV1) < 0){ ## Checking whether less susceptibles than vaccination rate
    StV1 = Mif[i+100, "S"]} ## If so, setting number vaccinated to the remainder
  
  
  
  #Transitions
  ## FROM S
  Mif[i+100, "StI"] = R/7 * Mif[i+100,"S"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Infection from infected (whether vaccinated or not). Beta defined implicitly from recovery time (see below)
  
  if((StV1 - Mif[i+100, "StI"]) < 0){
    Mif[i+100, "StV1n"] = 0
    Mif[i+100, "StV1e"] = 0
  } else {
    Mif[i+100, "StV1n"] = (StV1 - Mif[i+100, "StI"]) * (1-VE1) ## Of those initially vaccinated, some will be ineffective (1-VE of initial dose)
    
    Mif[i+100, "StV1e"] = (StV1 - Mif[i+100, "StI"]) * VE1 ##Those which are not are effective
    
  }
  
  
  
  ## FROM I
  if (i<8){
    Mif[i+100, "ItR"] = Mif[101, "I"] * (1-IFR)/7 ##Delay of 7 days representing infectious period
    Mif[i+100, "ItD"] = Mif[101, "I"] * IFR/7 ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    # Cludge to remove initial infected pop, assuming uniform infection.
  } else {
    Mif[i+100, "ItR"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * (1-IFR) ##Delay of 7 days representing infectious period
    
    Mif[i+100, "ItD"] = (Mif[i+93, "StI"] + Mif[i+93, "V1ntI"] + Mif[i+93, "V2ntI"]) * IFR ## Survival governed by IFR (i.e ItD/(ItD +iTR) = IFR)
    
  }
  
  
  ##if (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"] - V1tV2 < 0.000001) ## Lazy catch to avoid non-negative/floating point rounding etc
  ##{V1tV2 = 0}
  
  
  ## FROM V1n
  Mif[i+100, "V1ntI"] = R/7 * Mif[i+100,"V1n"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  ##If vaccine ineffective, risk of transition to I, with same coefficient as StI
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1ntV2n"] = 0
    Mif[i+100, "V1ntV2e"] = 0
  } else {
    Mif[i+100, "V1ntV2n"] = (1-VE2)/(1-VE1) *V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])
    Mif[i+100, "V1ntV2e"] = (1 - (1-VE2)/(1-VE1)) * V1tV2 * Mif[i+100, "V1n"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  # First term in both is the chance of 'booster rescue'. P(Second dose failing|first dose failing) is the prop 
  # ineffective after second vaccine/ prop ineffective after first. Then the rate is the total V1->V2 rate proportionate
  # to those in other groups.
  
  
  ## FROM V1e
  if (Mif[i+93, "V1e"] == 0){
    rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"]
  } else
  {rV1e1 = VE1*VE1Ip*Mif[i+93, "StV1e"] * (1 - (Mif[i+93, "V1etV1i"] + Mif[i+93, "V1etV2e"])/Mif[i+93, "V1e"])}
  if (Mif[i+94, "V1e"] == 0){
    rV1e2 = rV1e1
  } else
  {rV1e2 = rV1e1 * (1 - (Mif[i+94, "V1etV1i"] + Mif[i+94, "V1etV2e"])/Mif[i+94, "V1e"])}
  if (Mif[i+95, "V1e"] == 0){
    rV1e3 = rV1e2
  } else
  {rV1e3 = rV1e2 * (1 - (Mif[i+95, "V1etV1i"] + Mif[i+95, "V1etV2e"])/Mif[i+95, "V1e"])}
  if (Mif[i+96, "V1e"] == 0){
    rV1e4 = rV1e3
  } else
  {rV1e4 = rV1e3 * (1 - (Mif[i+96, "V1etV1i"] + Mif[i+96, "V1etV2e"])/Mif[i+96, "V1e"])}
  if (Mif[i+97, "V1e"] == 0){
    rV1e5 = rV1e4
  }  else
  {rV1e5 = rV1e4 * (1 - (Mif[i+97, "V1etV1i"] + Mif[i+97, "V1etV2e"])/Mif[i+97, "V1e"])}
  if (Mif[i+98, "V1e"] == 0){
    rV1e6 = rV1e5
  } else
  {rV1e6 = rV1e5 * (1 - (Mif[i+98, "V1etV1i"] + Mif[i+98, "V1etV2e"])/Mif[i+98, "V1e"])}
  if (Mif[i+99, "V1e"] == 0){
    rV1e7 = rV1e6
  }  else
  {rV1e7 = rV1e6 * (1 - (Mif[i+99, "V1etV1i"] + Mif[i+99, "V1etV2e"])/Mif[i+99, "V1e"])}
  
  Mif[i+100, "V1etV1r"] = rV1e7*VE1Ip
  
  ## Lagged transition code. In essence:
  # 1. A proportion of those entering the compartment X will progress to compartment Y in n days.
  # (here, (S->V1e) -> V1r) * constant corresponding to infection vaccine reduction after 7 days.
  # 2. However, during that time some will have moved to other compartments (i.e. V1e -> V1e;
  # V1e -> V2e).
  # 3. Thus for each day the 'initial entry' cohort is attritted proportionately by those leaving the compartment.
  # 4. (The ugly if/else logic is to avoid div/0 issues)
  
  Mif[i+100, "V1etV1i"] = R/7 * Mif[i+100,"V1e"] * (Mif[i+100, "I"]+ Mif[i+100, "V1i"]+ Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1etV2e"] = 0
  } else {
    Mif[i+100, "V1etV2e"] = V1tV2 * Mif[i+100, "V1e"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1e / All V1
  
  ## FROM V1i
  if (Mif[i+93, "V1i"] == 0){
    rV1i1 = Mif[i+93, "V1etV1i"]
  } else
  {rV1i1 = Mif[i+93, "V1etV1i"]*(1 - (Mif[i+93, "V1itV2i"]/Mif[i+93, "V1i"]))}
  if (Mif[i+94, "V1i"] == 0){
    rV1i2 = rV1i1
  } else
  {rV1i2 = rV1i1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V1i"])}
  if (Mif[i+95, "V1i"] == 0){
    rV1i3 = rV1i2
  } else
  {rV1i3 = rV1i2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V1i"])}
  if (Mif[i+96, "V1i"] == 0){
    rV1i4 = rV1i3
  } else
  {rV1i4 = rV1i3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V1i"])}
  if (Mif[i+97, "V1i"] == 0){
    rV1i5 = rV1i4
  }  else
  {rV1i5 = rV1i4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V1i"])}
  if (Mif[i+98, "V1i"] == 0){
    rV1i6 = rV1i5
  } else
  {rV1i6 = rV1i5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V1i"])}
  if (Mif[i+99, "V1i"] == 0){
    rV1i7 = rV1i6
  }  else
  {rV1i7 = rV1i6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V1i"])}
  
  Mif[i+100, "V1itV1r"] = rV1i7
  # Again, rate of recovery, but noting loss of people due to competing vaccination over time period 
  
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1itV2i"] = 0
  } else {
    Mif[i+100, "V1itV2i"] = V1tV2 * Mif[i+100, "V1i"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ## FROM V1r
  if((Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"]) == 0){
    Mif[i+100, "V1rtV2r"] = 0
  } else {
    Mif[i+100, "V1rtV2r"] = V1tV2 * Mif[i+100, "V1r"] / (Mif[i+100, "V1n"] + Mif[i+100, "V1e"] + Mif[i+100, "V1i"] + Mif[i+100, "V1r"])}
  #Rate of booster allocation proportion to V1i / All V1
  
  
  ##From V2n
  Mif[i+100, "V2ntI"] = R/7 * Mif[i+100,"V2n"] * (Mif[i+100, "I"]+Mif[i+10, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  
  ##From V2e
  if (Mif[i+93, "V2e"] == 0){
    rV2e1 = Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"]
  } else
  {rV2e1 = (Mif[i+93, "V1ntV2e"]+Mif[i+93, "V1etV2e"])*(1 - (Mif[i+93, "V2etV2i"]/Mif[i+93, "V2e"]))}
  if (Mif[i+94, "V2e"] == 0){
    rV2e2 = rV2e1
  } else
  {rV2e2 = rV2e1 * (1 - Mif[i+94, "V1itV2i"]/Mif[i+94, "V2e"])}
  if (Mif[i+95, "V2e"] == 0){
    rV2e3 = rV2e2
  } else
  {rV2e3 = rV2e2 * (1 - Mif[i+95, "V1itV2i"]/Mif[i+95, "V2e"])}
  if (Mif[i+96, "V2e"] == 0){
    rV2e4 = rV2e3
  } else
  {rV2e4 = rV2e3 * (1 - Mif[i+96, "V1itV2i"]/Mif[i+96, "V2e"])}
  if (Mif[i+97, "V2e"] == 0){
    rV2e5 = rV2e4
  }  else
  {rV2e5 = rV2e4 * (1 - Mif[i+97, "V1itV2i"]/Mif[i+97, "V2e"])}
  if (Mif[i+98, "V2e"] == 0){
    rV2e6 = rV2e5
  } else
  {rV2e6 = rV2e5 * (1 - Mif[i+98, "V1itV2i"]/Mif[i+98, "V2e"])}
  if (Mif[i+99, "V2e"] == 0){
    rV2e7 = rV2e6
  }  else
  {rV2e7 = rV2e6 * (1 - Mif[i+99, "V1itV2i"]/Mif[i+99, "V2e"])}
  
  Mif[i+100, "V2etV2r"] = rV2e7*(VE2-VE1)*VE2Ip
  
  Mif[i+100, "V2etV2i"] = R/7 * Mif[i+100,"V2e"] * (Mif[i+100, "I"]+Mif[i+100, "V1i"]+Mif[i+100, "V2i"])
  #Rate of infection in those vaccinated, as before
  
  ##From V2i
  Mif[i+100, "V2itV2r"] = Mif[i+93, "V2etV2i"] + Mif[i+93, "V1itV2i"]
  
  
  ###UPDATING STATES
  Mif[i+101, "S"] = Mif[i+100, "S"] - Mif[i+100, "StI"] - Mif[i+100, "StV1e"] - Mif[i+100, "StV1n"]
  Mif[i+101, "I"] = Mif[i+100, "I"] + Mif[i+100, "StI"] + Mif[i+100, "V1ntI"] + Mif[i+100, "V2ntI"] - Mif[i+100, "ItR"] - Mif[i+100, "ItD"]
  Mif[i+101, "R"] = Mif[i+100, "R"] + Mif[i+100, "ItR"]
  Mif[i+101, "D"] = Mif[i+100, "D"] + Mif[i+100, "ItD"]
  Mif[i+101, "V1n"] = Mif[i+100, "V1n"] + Mif[i+100, "StV1n"] - Mif[i+100, "V1ntI"] - Mif[i+100, "V1ntV2n"] - Mif[i+100, "V1ntV2e"]
  Mif[i+101, "V1e"] = Mif[i+100, "V1e"] + Mif[i+100, "StV1e"] - Mif[i+100, "V1etV1i"] - Mif[i+100, "V1etV2e"] - Mif[i+100, "V1etV1r"]
  Mif[i+101, "V1i"] = Mif[i+100, "V1i"] + Mif[i+100, "V1etV1i"] - Mif[i+100, "V1itV2i"] - Mif[i+100, "V1itV1r"]
  Mif[i+101, "V1r"] = Mif[i+100, "V1r"] + Mif[i+100, "V1etV1r"] + Mif[i+100, "V1itV1r"] - Mif[i+100, "V1rtV2r"]
  Mif[i+101, "V2n"] = Mif[i+100, "V2n"] + Mif[i+100, "V1ntV2n"] - Mif[i+100, "V2ntI"]
  Mif[i+101, "V2e"] = Mif[i+100, "V2e"] + Mif[i+100, "V1ntV2e"] + Mif[i+100, "V1etV2e"] - Mif[i+100, "V2etV2i"] - Mif[i+100, "V2etV2r"]
  Mif[i+101, "V2i"] = Mif[i+100, "V2i"] + Mif[i+100, "V1itV2i"] + Mif[i+100, "V2etV2i"] - Mif[i+100, "V2itV2r"]
  Mif[i+101, "V2r"] = Mif[i+100, "V2r"] + Mif[i+100, "V2itV2r"] + Mif[i+100, "V1rtV2r"] + Mif[i+100, "V2etV2r"]
  Mif[i+101, "checktotal"] = Mif[i+101, "S"] + Mif[i+101, "I"] +  Mif[i+101, "R"] + Mif[i+101, "D"] + Mif[i+101, "V1n"] + Mif[i+101, "V1e"] + Mif[i+101, "V1i"] + Mif[i+101, "V1r"] + Mif[i+101, "V2n"] + Mif[i+101, "V2e"] +  Mif[i+101, "V2i"] + Mif[i+101, "V2r"] 
  
}



## Quick and dirty epi curve
PS = (Mif[,"S"] + Mif[,"V1n"] + Mif[,"V2n"] + Mif[,"V1e"] + Mif[,"V2e"])
PI = (Mif[,"I"] + Mif[,"V1i"] + Mif[,"V2i"])
PD = (Mif[,"D"])
PR = (Mif[,"R"]+ Mif[,"V1r"] + Mif[,"V2r"])

data = rbind(PS, PI, PD, PR)
data1 = t(data[,100:600])
plot(data1[2:500,1], type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion", ylim = c(0, 1)) 
lines(data1[,2], col = 'red')
lines(data1[,3], col = 'green')
lines(data1[,4], col = 'blue')
legend("topright", legend = c("Susceptible", "Infected", "Died", "Recovered"), lwd = 3, col=c("black", "red", "green", "blue"))

plot(data1[,2])

highbdf = data1[,2]

plot(highbase, type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion Infected", xlim= c(0, 400)) 
lines(highfdf, col = 'blue')
lines(highbdf, col = 'red')


par(mfrow=c(1,3))
plot(lowbase, type = 'l', main = "Epidemic Curve (R = 1.1)", xlab = "Time step", ylab = "Proportion Infected", xlim= c(0, 400)) 
lines(lowfdf, col = 'blue')
lines(lowbdf, col = 'red')

plot(midbase, type = 'l', main = "Epidemic Curve (R = 1.5)", xlab = "Time step", ylab = "Proportion Infected", xlim= c(0, 400)) 
lines(midfdf, col = 'blue')
lines(midbdf, col = 'red')

plot(highbase, type = 'l', main = "Epidemic Curve (R = 3)", xlab = "Time step", ylab = "Proportion Infected", xlim= c(0, 400)) 
lines(highfdf, col = 'blue')
lines(highbdf, col = 'red')

legend("topright", legend = c("No vaccination", "FDF", "BDF"), lwd = 3, col=c("black", "blue", "red"))

sum(lowbase)/7


#################################################################################
MATLAB CODE FOR NPI HARMS
#################################################################################

d = 0:0.0001:1

kBDF = 1./((1 - d*0.9)*2.7)

plot(kBDF)

d1 = 0:0.0001:0.5 
d2 = 0.5001:0.0001:1

kFDF1 = 1./((1 - d1*2*0.7)*2.7)

kFDF2 = 1./((1 - 0.7 - (d2 - 0.5)*2*0.2)*2.7)

plot(kFDF1)
plot(kFDF2)
plot([kFDF1 kFDF2])

plot(kBDF)
hold on
plot([kFDF1 kFDF2])
hold off
xlim([0 10000])
legend("BDF", "FDF")
xlabel("D")
ylabel("k_{NPI}")
xticks([0 2500 5000 7500 10000])
xticklabels(["0", "0.25", "0.5", "0.75", "1"])


